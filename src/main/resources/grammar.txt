Mapping ::= Base? Prefix* Transformation* Rule+
Base ::= 'BASE' IRI_REF
Prefix ::= 'PREFIX' IRI_REF
Transformation ::= 'TRANSFORMATION' TRANSFORMATION_NAME '{' CODE '}'
Rule ::= 'RULE' Condition Production
Condition ::= 'CONDITION' ( IndividualCondition | ClassCondition | PropertyCondition )
IndividualCondition ::= 'INDIVIDUAL' IriRef
ClassCondition ::= 'CLASS' ( UriClassCondition | NAryClassCondition ) PropertyCondition
NAryClassCondition ::= ClassAndCondition | ClassOrCondition
ClassAndCondition ::= ClassCondition ( 'AND' ClassCondition)+
ClassOrCondition ::= ClassCondition ( 'OR' ClassCondition)+
UriClassCondition ::= 'CLASS' IriRef
PropertyCondition ::= ObjectPropertyCondition | DataPropertyCondition | NAryPropertyCondition
ObjectPropertyCondition ::= ObjectPropertyValueCondition | ObjectPropertyTypeCondition
ObjectPropertyValueCondition ::= IriRef 'VALUE' IriRef
ObjectPropertyTypeCondition ::= IriRef 'TYPE' ClassCondition
DataPropertyCondition ::= DataPropertyValueCondition | DataPropertyTypeCondition
DataPropertyValueCondition ::= IriRef 'VALUE' ValueCondition
ValueCondition ::= ( COMPARATOR ConstantValue ) | 'MATCHES' '(' RegEx  |( ValueCondition ',' ValueCondition )
DataPropertyTypeCondition ::= IriRef 'TYPE' ClassCondition
NAryPropertyCondition ::= PropertyAndCondition | PropertyOrCondition | PropertyAggregationCondition
PropertyAndCondition ::= PropertyCondition ( 'AND' PropertyCondition )+
PropertyOrCondition ::= PropertyCondition ( 'OR' PropertyCondition )+
PropertyAggregationCondition ::= 'AGGREGATION' AggregationCondition PropertyCondition
AggregationCondition ::= AGGREGATION_TYPE COMPARATOR INTEGER (';' AggregationCondition)?
Production ::= 'PRODUCTION' IndividualProduction | ClassProduction | PropertyProduction
IndividualProduction ::= 'INDIVIDUAL' IriRef
ClassProduction ::= 'CLASS' IRIRef PropertyProduction
PropertyProduction ::= ( ObjectPropertyValueProduction | ObjectPropertyTypeProduction | DataPropertyValueProduction ) ( 'AND' PropertyCondition)?
ObjectPropertyValueProduction ::= IriRef 'VALUE' IriRef
ObjectPropertyTypeProduction ::= IriRef 'TYPE' ClassProduction
DataPropertyValueProduction ::= IriRef 'VALUE' Value
Value ::= ReferenceValue | ConstantValue | TransformationValue
ReferenceValue ::= 'REFERENCE' IriRef
TransformationValue ::= TRANSFORMATION_NAME '(' Value (',' Value)* ')'
IriRef ::= IRI_REF | PrefixedName
PrefixedName ::= PNAME_LN | PNAME_NS
ConstantValue::= TypedConstantValue | NumericValue | StringValue
NumericValue ::= INTEGER | DECIMAL
StringValue ::= STRING_LITERAL2 | STRING_LITERAL_LONG2
TypedConstantValue ::= String '^^' IRIRef
String ::= STRING_LITERAL1 | STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2
/* Terminals */
COMPARATOR = '=' | '!=' | '>' | '>=' | '<' | '<='
AGGREGATION_TYPE ::= 'SUM' | 'AVG' | 'MIN' | 'MAX' | 'COUNT'
INTEGER ::= [0-9]+
DECIMAL ::= [0-9]+ '.' [0-9]* | '.' [0-9]+
IRI_REF ::= '<' ([^<>"{}|^`\]-[#x00-#x20])* '>'
STRING_LITERAL1 ::= "'" ( ([^#x27#x5C#xA#xD]) | ECHAR )* "'"
STRING_LITERAL2 ::= '"' ( ([^#x22#x5C#xA#xD]) | ECHAR )* '"'
STRING_LITERAL_LONG1 ::= "'''" ( ( "'" | "''" )? ( [^'\] | ECHAR ) )* "'''"
STRING_LITERAL_LONG2 ::= '"""' ( ( '"' | '""' )? ( [^"\] | ECHAR ) )* '"""'
ECHAR ::= '\' [tbnrf\"']
PNAME_LN ::= PNAME_NS PN_LOCAL
PNAME_NS ::= PN_PREFIX? ':'
PN_PREFIX ::= PN_CHARS_BASE ((PN_CHARS|'.')* PN_CHARS)?
TRANSFORMATION_NAME ::= (<PN_CHARS_BASE>+)*
PN_CHARS ::= PN_CHARS_U | '-' | [0-9] | #x00B7 | [#x0300-#x036F] | [#x203F-#x2040]
PN_CHARS_U ::= PN_CHARS_BASE | '_'
PN_CHARS_BASE ::= [A-Z] | [a-z] | [#x00C0-#x00D6] | [#x00D8-#x00F6] | [#x00F8-#x02FF] | [#x0370-#x037D] | [#x037F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
PN_LOCAL ::= ( PN_CHARS_U | [0-9] ) ((PN_CHARS|'.')* PN_CHARS)?



