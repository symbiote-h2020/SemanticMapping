PARSER_BEGIN(MappingParser)

package eu.h2020.symbiote.semantics.mapping.parser;

import eu.h2020.symbiote.semantics.mapping.model.*;
import eu.h2020.symbiote.semantics.mapping.model.condition.*;
import eu.h2020.symbiote.semantics.mapping.model.production.*;
import eu.h2020.symbiote.semantics.mapping.model.transformation.JavaScriptTransformation;
import eu.h2020.symbiote.semantics.mapping.model.value.ConstantValue;
import eu.h2020.symbiote.semantics.mapping.model.value.Value;
import org.apache.jena.graph.NodeFactory;
import org.apache.jena.graph.Node;
import java.util.ArrayList;
import java.util.List;
import org.apache.jena.sparql.path.Path;
import eu.h2020.symbiote.semantics.mapping.sparql.utils.JenaHelper;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;
import java.nio.charset.Charset;
import org.apache.jena.datatypes.TypeMapper;
import eu.h2020.symbiote.semantics.mapping.model.value.ReferenceValue;
import eu.h2020.symbiote.semantics.mapping.model.value.TransformationValue;


public class MappingParser extends AbstractMappingParser{
    private static final Charset DEFAULT_ENCODING = Charset.forName("UTF-8");

public static Mapping parse(String mapping) throws ParseException {
        return parse(mapping, DEFAULT_ENCODING);
    }

    public static Mapping parse(String mapping, String base, Map<String, String> prefixes) throws ParseException {
        return parse(mapping, DEFAULT_ENCODING, base, prefixes);
    }

    public static Mapping parse(String mapping, Charset encoding) throws ParseException {
        InputStream is = new ByteArrayInputStream(mapping.getBytes(encoding));
        return new MappingParser(is, encoding.name()).Mapping();
    }

    public static Mapping parse(String mapping, Charset encoding, String base, Map<String, String> prefixes) throws ParseException {
        InputStream is = new ByteArrayInputStream(mapping.getBytes(encoding));
        return new MappingParser(is, encoding.name(), base, prefixes).Mapping();
    }

    public MappingParser(java.io.InputStream stream, String encoding, String base, Map<String, String> prefixes) {
        this(stream, encoding);
        if (base != null && !base.isEmpty()) {
            setBase(base);
        }
        if (prefixes != null) {
            for (Map.Entry<String, String> prefix : prefixes.entrySet()) {
                addPrefix(prefix.getKey(), prefix.getValue());
            }
        }
    }
}

PARSER_END(MappingParser)

TOKEN :
{
    <#WS: " " | "\t" | "\r" | "\n" | "\f">
}

SKIP :
{
    <WHITESPACE: <WS>>
}

TOKEN:
{
	<#PN_CHARS_BASE:
          ["A"-"Z"] | ["a"-"z"] |
          ["\u00C0"-"\u00D6"] | ["\u00D8"-"\u00F6"] | ["\u00F8"-"\u02FF"] |
          ["\u0370"-"\u037D"] | ["\u037F"-"\u1FFF"] |
          ["\u200C"-"\u200D"] | ["\u2070"-"\u218F"] | ["\u2C00"-"\u2FEF"] |
          ["\u3001"-"\uD7FF"] | ["\uF900"-"\uFFFD"]>
|	<#PN_CHARS_U: <PN_CHARS_BASE> | "_">
|	<#PN_CHARS: (<PN_CHARS_U> | "-" | ["0"-"9"] | "\u00B7" | ["\u0300"-"\u036F"] | ["\u203F"-"\u2040"] )>
|	<#PN_PREFIX: <PN_CHARS_BASE> ((<PN_CHARS>|".")* <PN_CHARS>)? >
|	<#PN_LOCAL: (<PN_CHARS_U> | ":" | ["0"-"9"] | <PLX> )
              ( (<PN_CHARS> | "." |":" | <PLX> )*
                (<PN_CHARS> | ":" | <PLX>) )? >
|	<#PN_LOCAL_ESC: "\\"
          ( "_" |
            "~" | "." | "-" | "!" | "$" | "&" | "'" |
           "(" | ")" | "*" | "+" | "," | ";" | "=" |
           "/" | "?" | "#" | "@" | "%" ) >
|	<#PLX: <PERCENT> | <PN_LOCAL_ESC>>
|	<#PERCENT: "%" <HEX> <HEX> >
|	<#HEX: ["0"-"9"] | ["A"-"F"] | ["a"-"f"]>
}


TOKEN [IGNORE_CASE] :
{
        <BASE: "BASE">
|	<PREFIX: "PREFIX">
|	<RULE: "RULE">
|	<CONDITION: "CONDITION">
|	<PRODUCTION: "PRODUCTION">
|	<INDIVIDUAL: "INDIVIDUAL">
|	<CLASS: "CLASS">
|	<AND: "AND">
|	<OR: "OR">
|	<AS: "AS">
|	<VALUE: "VALUE">
|	<TYPE: "TYPE">
|       <EQUAL: "=">
|       <NOT_EQUAL: "!=">
|       <GREATER_EQUAL: ">=">
|       <GREATER_THAN: ">">
|       <LESS_EQUAL: "<=">
|       <LESS_THAN: "<">
|       <SUM: "SUM">
|       <AVG: "AVG">
|       <MIN: "MIN">
|       <MAX: "MAX">
|       <COUNT: "COUNT">
|       <AGGREGATION: "AGGREGATION">
|       <TRANSFORMATION: "TRANSFORMATION">
|       <REFERENCE: "REFERENCE">
|       <ANY: "ANY">
|       <MATCHES: "MATCHES"> : REGEX_STATE
}

TOKEN:
{
	<COLON: ":">
|	<SEMICOLON: ";">
|	<COMMA: ",">
|	<LB: "(">
| 	<RB: ")">
|       <LBRACKET: "[">
|       <RBRACKET: "]">
|       <DATATYPE: "^^">
| 	<INTEGER: ("-")?(["0"-"9"])+>
| 	<DOUBLE: ("-")?(["0"]|["1"-"9"](["0"-"9"])*)("."(["0"-"9"])+)?(["E"]("-")?(["0"-"9"])+)?>
| 	<IRIABS: "<" (~[ ">","<", "\"", "{", "}", "^", "\\", "|", "`", "\u0000"-"\u0020"])* ">">
|       <PNAME_NS: (<PN_PREFIX>)? ":">
|	<PNAME_LN: <PNAME_NS> <PN_LOCAL>>
|	<FCT_NAME: (<PN_CHARS_BASE>)+>
}

SKIP :
{
    <"#" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
}



/** Main production. */
Mapping Mapping() : {Mapping m = new Mapping(); MappingRule r = null;}
{
    (
        (Base(m))?
        (Prefix())*
        (Transformation(m))*
        (r=Rule(){m.getMappingRules().add(r);})+
    )
    {
        m.setPrefixes(prefixes.getNsPrefixMap());
        return m;
    }
}

void Base(Mapping m) : {Token ti;}
{
    (<BASE> ti = <IRIABS>)
    {
        m.setBase(stripQuotes(ti.image));
        setBase(stripQuotes(ti.image));
    }    
}

void Prefix() : {Token tp; Token ti;}
{
    (<PREFIX> tp = <PNAME_NS> ti = <IRIABS>)
    {
        addPrefix(tp.image, stripQuotes(ti.image));
    }    
}

TOKEN_MGR_DECLS : {
    int bracketNestingDepth ;
    int quotesNestingDepth ; 
    static int regexBracketNestingDepth = 0;   
}

SKIP : {  "{" { bracketNestingDepth = 1 ; } : JS_CODE }
<JS_CODE>  SKIP : {  "{" { bracketNestingDepth += 1 ; } }
<JS_CODE>  TOKEN : {  <CODE:"}"> { bracketNestingDepth -= 1; SwitchTo( bracketNestingDepth==0 ? DEFAULT : JS_CODE ) ; }}
<JS_CODE>  MORE : {  < ~[] > }



void Transformation(Mapping m) : {Token name; Token t;}
{
    (
        <TRANSFORMATION> 
        name = <FCT_NAME> 
        t = <CODE>
    )
    {
        String code = t.image.substring(0, t.image.length()-1).trim();
        m.getTransformations().add(new JavaScriptTransformation(name.image, code));
    }    
}

MappingRule Rule() : {Condition c = null; Production p = null;}
{
    (<RULE> c=Condition() p=Production())
    {
        return new MappingRule(c, p);
    }
}

Condition Condition() : {Condition c = null;}
{
    (<CONDITION> 
        (LOOKAHEAD(2)c=ConditionIndividual()
        |LOOKAHEAD(2)c=ClassCondition()
        |LOOKAHEAD(2147483647)c=ConditionProperty()))	 
    { 
        return c; 
    }
}

ClassAndCondition ClassConditionAnd() : { ClassCondition c = null; List<ClassCondition> cs = new ArrayList<ClassCondition>();}
{
    (   <LB>
        c=ClassCondition() {cs.add(c);} 
        <AND> 
        c=ClassCondition() {cs.add(c);}         
        (
            LOOKAHEAD(2147483647)
            <AND> 
            c=ClassCondition() {cs.add(c);})*
            <RB>
        )
    {
        return new ClassAndCondition(cs);
    }
}

ClassOrCondition ClassConditionOr() : { ClassCondition c = null; List<ClassCondition> cs = new ArrayList<ClassCondition>();}
{
    (   <LB>
        c=ClassCondition() {cs.add(c);} 
        <OR> 
        c=ClassCondition() {cs.add(c);}         
        (
            LOOKAHEAD(2147483647)
            <OR> 
            c=ClassCondition() {cs.add(c);})*
            <RB>
        )
    {
        return new ClassOrCondition(cs);
    }
}

ClassCondition ClassCondition() : {ClassCondition c = null; PropertyCondition p = null;}
{
    (
        ( 
            LOOKAHEAD(20000) (<LB> c = ClassCondition() <RB>)
            | LOOKAHEAD(20000) c = ClassConditionUri() 
            | LOOKAHEAD(2000)c=ClassConditionAnd() 
            | LOOKAHEAD(2000)c=ClassConditionOr()  
        )
        (LOOKAHEAD(2000)p = ConditionProperty())?
    )  
    {	
        if (p != null)
        {
            c.setPropertyCondition(p);
        }
        return c;
    }
}

UriClassCondition ClassConditionUri() : {Node n = null;}
{
    (<CLASS> n=IRI())
    {
        return new UriClassCondition(n);
    }
}

IndividualCondition ConditionIndividual() : {Node n = null;}
{
    (<INDIVIDUAL> n=IRI())
    {
        return new IndividualCondition(n);
    }
}

PropertyCondition ConditionPropertyUnary() : {PropertyCondition c = null;}
{
    ( LOOKAHEAD(30) c=ConditionPropertyDataValue() 
    | LOOKAHEAD(3) c=ConditionPropertyDataType()
    | LOOKAHEAD(3) c=ConditionPropertyObjectValue()
    | LOOKAHEAD(3) c=ConditionPropertyObjectType()
    | c=ConditionPropertyPath()
    | (<LB> c = ConditionProperty() <RB>))
    {
        return c;
    }
}

PropertyAndCondition ConditionPropertyAnd() : { PropertyCondition c = null; List<PropertyCondition> cs = new ArrayList<PropertyCondition>();}
{
    (c=ConditionPropertyUnary() {cs.add(c);} <AND> c=ConditionPropertyUnary() {cs.add(c);} (LOOKAHEAD(2147483647)<AND> c=ConditionPropertyUnary() {cs.add(c);})*)
    {
        return new PropertyAndCondition(cs);
    }
}

PropertyOrCondition ConditionPropertyOr() : { PropertyCondition c = null; List<PropertyCondition> cs = new ArrayList<PropertyCondition>();}
{
    (c=ConditionPropertyUnary() {cs.add(c);} <OR> c=ConditionPropertyUnary() {cs.add(c);} (LOOKAHEAD(2147483647)<OR> c=ConditionPropertyUnary() {cs.add(c);})*)
    {
        return new PropertyOrCondition(cs);
    }
}

AggregationInfo AggregationInfo() :
{
    AggregationType t = null;
    List<ValueCondition> vs = new ArrayList<ValueCondition>();
    Node n = null;
    Token name = null;
}
{
    (t=AggregationType() vs=ValueConditions() (<AS> name=<FCT_NAME>)?) 
    {  
        AggregationInfo a = new AggregationInfo(t, vs);
        if(name != null) {
            a.setResultName(name.image);
        }
        return a;
    } 
}

PropertyAggregationCondition ConditionPropertyAggregation() : 
{ 
    PropertyCondition c = null; 
    AggregationInfo a = null;
    List<AggregationInfo> as = new ArrayList<AggregationInfo>();
    List<PropertyCondition> cs = new ArrayList<PropertyCondition>();
}
{
    <AGGREGATION> 
    (a=AggregationInfo()) { as.add(a); } 
    (<SEMICOLON> (a=AggregationInfo() { as.add(a); }))*
    (LOOKAHEAD(2147483647)c=ConditionProperty() {cs.add(c);})+
    {
        return new PropertyAggregationCondition(as, cs);
    }
}

AggregationType AggregationType() :{Token t = null;}
{
    ( t=<SUM>
    | t=<AVG>
    | t=<MIN>
    | t=<MAX>
    | t=<COUNT> )
    {
        return AggregationType.valueOf(t.image);
    }
}

PropertyCondition ConditionProperty() :{PropertyCondition c = null;}
{
    ( LOOKAHEAD(2147483647) c=ConditionPropertyAnd() 
    | LOOKAHEAD(2147483647) c=ConditionPropertyOr()
    | LOOKAHEAD(2147483647) c=ConditionPropertyUnary()
    | LOOKAHEAD(2147483647) c=ConditionPropertyAggregation() ) 
    {
        return c;
    }
}

PropertyPathCondition ConditionPropertyPath() :{Path p = null;}
{
    p = Property()
    {
        return new PropertyPathCondition(p);
    }
}

DataPropertyValueCondition ConditionPropertyDataValue() :{Path p = null; List<ValueCondition> cs = new ArrayList<ValueCondition>();}
{
    p=Property() <VALUE> cs=ValueConditions()
    {
        return new DataPropertyValueCondition(p, cs);
    }
}

DataPropertyTypeCondition ConditionPropertyDataType() :{Path p = null; Node n;}
{
    p=Property() <TYPE> n=IRI()
    {
        return new DataPropertyTypeCondition(p, n.toString());
    }
}

ObjectPropertyValueCondition ConditionPropertyObjectValue() :{Path p = null; Node n;}
{
    p=Property() <VALUE> n=IRI()
    {
        return new ObjectPropertyValueCondition(p, n);
    }
}

ObjectPropertyTypeCondition ConditionPropertyObjectType() :{Path p = null; ClassCondition c;}
{
    p=Property() <TYPE> c=ClassCondition()
    {
        return new ObjectPropertyTypeCondition(p, c);
    }
}

List<ValueCondition> ValueConditions() : {ValueCondition c; List<ValueCondition> cs = new ArrayList<ValueCondition>();}
{
    (c=ValueCondition() { cs.add(c); } (<COMMA> c=ValueCondition() { cs.add(c); })*)
    {
        return cs;
    }
}

Path Property() : {Node n = null;}
{
    n=IRI()
    {
        return JenaHelper.parsePath(n.toString());
    }
}

Production Production() : {Production p;}
{
    (<PRODUCTION> 
        (p=ProductionIndividual()
        |p=ProductionClass()
        |p=ProductionProperty()))	 
    { 
        return p; 
    }
}

IndividualProduction ProductionIndividual() : {Node n = null;}
{
    (<INDIVIDUAL> n=IRI())
    {
        return new IndividualProduction(n);
    }
}

ClassProduction ProductionClass() : {Node n; PropertyProduction p; List<PropertyProduction> ps = new ArrayList<PropertyProduction>();}
{
    (<CLASS> n=IRI() (LOOKAHEAD(2147483647)(p=ProductionProperty(){ ps.add(p); }) (LOOKAHEAD(2147483647)<AND> (p=ProductionProperty(){ ps.add(p); }))*)?)
    {
        return new ClassProduction(n, ps);
    }
}

PropertyProduction ProductionProperty() : {PropertyProduction p; }
{
    ( LOOKAHEAD(2147483647) p = ProductionPropertyObjectValue()
    | LOOKAHEAD(2147483647) p = ProductionPropertyObjectType()
    | LOOKAHEAD(2147483647) p = ProductionPropertyDataValue())
    {
        return p;
    }
}

DataPropertyProduction ProductionPropertyDataValue() :{Path p = null; Value v;}
{
    p=Property() <VALUE> v=Value()
    {
        return new DataPropertyProduction(p, v);
    }
}

ObjectPropertyValueProduction ProductionPropertyObjectValue() :{Path p = null; Node n;}
{
    p=Property() <VALUE> n=IRI()
    {
        return new ObjectPropertyValueProduction(p, n);
    }
}

ObjectPropertyTypeProduction ProductionPropertyObjectType() :{Path p = null; ClassProduction c;}
{
    p=Property() <TYPE> c=ProductionClass()
    {
        return new ObjectPropertyTypeProduction(p, c);
    }
}

Node IRI() : {Node n = null;}
{
    (<ANY>{n=Node.ANY;} | n = IRIAbs() | n = IRIPrefix())
    {
            return n;
    }
}

Node IRIAbs() : {Token t;}
{
    t=<IRIABS>	
    {
            return NodeFactory.createURI(stripQuotes(t.image));
    }
}

Node IRIPrefix() : {Token t;}
{
    t=<PNAME_LN>	
    {
            return expand(t.image);
    }
}

JAVACODE
String skip_to_matching_brace() {
  Token tok;
  MappingParserTokenManager.regexBracketNestingDepth = 0;
  String temp = "";
  while (true) {
    tok = getToken(1);
    temp += tok.image;
    if (tok.kind == REGEX_OPEN) MappingParserTokenManager.regexBracketNestingDepth++;
    if (tok.kind == REGEX_CLOSE) {
      MappingParserTokenManager.regexBracketNestingDepth--;
         if (MappingParserTokenManager.regexBracketNestingDepth == 0) break;
    }
    tok = getNextToken();
  }
  getNextToken();
  temp = temp.trim();
  temp = temp.substring(1, temp.length() -1);
  return temp;
}

<REGEX_STATE> TOKEN :  
{
    <REGEX_OPEN:<LB>>
    | <REGEX_CLOSE:<RB>> {
            if (regexBracketNestingDepth == 1) {
                SwitchTo(DEFAULT);
            }
        }
    | <REGEX_ESCAPED: "\\" ~[]>
    | <REGEX_ANY: ~[]>
}

ValueCondition ValueCondition() : {Comparator c; ConstantValue v; String t;}
{
    ((c=Comparator() v=ConstantValue()) | (<MATCHES> t=skip_to_matching_brace() { c=Comparator.Matches; v=ConstantValue.fromString(t); }))
    {
        return new ValueCondition(c, v);
    }
}

Comparator Comparator() : {Token t;}
{
    ( t=<EQUAL>
    | t=<NOT_EQUAL>
    | t=<GREATER_EQUAL>
    | t=<GREATER_THAN>
    | t=<LESS_EQUAL>
    | t=<LESS_THAN> )
    {
        return Comparator.fromSymbol(t.image);
    }
}

Value Value() : {Value v;}
{
    ( LOOKAHEAD(2147483647) v=ReferenceValue()
    | LOOKAHEAD(2147483647) v=ConstantValue()
    | LOOKAHEAD(2147483647) v=TransformationValue())
    {
        return v;
    }
}

ConstantValue ConstantValue() : {ConstantValue v;}
{
    ( LOOKAHEAD(2147483647) v=TypedConstantValue()
    | LOOKAHEAD(2147483647) v=NumericValue()    
    | LOOKAHEAD(2147483647) v=StringValue() 
    )
    {
        return v;
    }
}


TOKEN : {  <START_QUOTE:"\""> { quotesNestingDepth = 1 ; } : QUOTE_STATE }
<QUOTE_STATE>  SKIP : {  "\\{" { quotesNestingDepth += 1 ; } }
<QUOTE_STATE>  TOKEN : {  <END_QUOTE:"\""> { quotesNestingDepth -= 1; SwitchTo( quotesNestingDepth==0 ? DEFAULT : QUOTE_STATE ) ; }}
<QUOTE_STATE>  MORE : {  < ~[] > }

ConstantValue TypedConstantValue() : {Token t; Node n;}
{
    (<START_QUOTE> t=<END_QUOTE> <DATATYPE> n=IRI())
    {
        return new ConstantValue(t.image.substring(0, t.image.length()-1), TypeMapper.getInstance().getTypeByName(n.getURI()));
    }
}

ReferenceValue ReferenceValue() : {Token t=null; Node n=null;}
{
    (<REFERENCE> (n=IRI() | t=<FCT_NAME>))
    {        
        if (n != null) {
            return new ReferenceValue(n.getURI());
        }
        if (t != null) {
            return new ReferenceValue(t.image);
        }
    }
}

TransformationValue TransformationValue() : {Token t; Value v; List<Value> vs = new ArrayList<Value>();}
{
    (t=<FCT_NAME> 
    <LB> 
    (v=Value(){vs.add(v);} (<COMMA> v=Value(){vs.add(v);})*)? 
    <RB>)
    {        
        return new TransformationValue(t.image, vs);
    }
}



ConstantValue StringValue() : {Token t; Node n;}
{
    (<START_QUOTE> t=<END_QUOTE>)
    {
        String value = t.image.substring(0, t.image.length()-1);
        return ConstantValue.fromString(value);
    }
}

ConstantValue NumericValue() : {ConstantValue v;}
{
    (v=IntegerValue() | v=DoubleValue())
    {
        return v;
    }
}

ConstantValue IntegerValue() : {Token t;}
{
    t = <INTEGER> 
    {
        return ConstantValue.fromInt(Integer.parseInt(t.image));
    }
}

ConstantValue DoubleValue() : {Token t;}
{
    t = <DOUBLE> 
    {
        return ConstantValue.fromDouble(Double.parseDouble(t.image));
    }
}