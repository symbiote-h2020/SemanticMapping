{
  "name" : "multi result test",
  "commonPrefixes" : {
    "xsd" : "http://www.w3.org/2001/XMLSchema#",
    "rdfs" : "http://www.w3.org/2000/01/rdf-schema#",
    "test" : "http://www.symbiote-h2020.eu/ontology/semanticmapping/testModel#",
    "rdf" : "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
    "owl" : "http://www.w3.org/2002/07/owl#",
    "dc" : "http://purl.org/dc/elements/1.1/"
  },
  "baseQuery" : "SELECT ?x ?y WHERE 
  { 
	?x a test:A .
	?x test:hasValue STRING_VALUE .
	?x test:hasValue2 ?y.
	FILTER(?y=INT_VALUE) .
  }",
  "alternativeQueries" : [ ],
  "expectedResult" : "SELECT ?x ?y WHERE 
  { 
	?x a test:B;
		test:hasValue2 test:instanceOfB .
  }",
"mapping" : {
    "mappingRules": ["java.util.ArrayList", [{
                "condition": ["eu.h2020.symbiote.semantics.mapping.model.condition.UriClassCondition", {
                        "propertyCondition": ["eu.h2020.symbiote.semantics.mapping.model.condition.PropertyAndCondition", {
                                "elements": ["java.util.ArrayList", [["eu.h2020.symbiote.semantics.mapping.model.condition.DataPropertyValueCondition", {
                                                "path": "<http://www.symbiote-h2020.eu/ontology/semanticmapping/testModel#hasValue>",
                                                "valueRestrictions": ["java.util.ArrayList", [{
                                                            "comparator": "Equal",
                                                            "value": ["eu.h2020.symbiote.semantics.mapping.model.value.ConstantValue", {
                                                                    "value": "test",
                                                                    "datatype": "http://www.w3.org/2001/XMLSchema#string"
                                                                }]
                                                        }]]
                                            }], ["eu.h2020.symbiote.semantics.mapping.model.condition.DataPropertyValueCondition", {
                                                "path": "<http://www.symbiote-h2020.eu/ontology/semanticmapping/testModel#hasValue2>",
                                                "valueRestrictions": ["java.util.ArrayList", [{
                                                            "comparator": "Equal",
                                                            "value": ["eu.h2020.symbiote.semantics.mapping.model.value.ConstantValue", {
                                                                    "value": 42,
                                                                    "datatype": "http://www.w3.org/2001/XMLSchema#integer"
                                                                }]
                                                        }]]
                                            }]]]
                            }],
                        "uri": {
                            "type": "URI",
                            "id": "http://www.symbiote-h2020.eu/ontology/semanticmapping/testModel#A"
                        }
                    }],
                "production": ["eu.h2020.symbiote.semantics.mapping.model.production.ClassProduction", {
                        "uri": {
                            "type": "URI",
                            "id": "http://www.symbiote-h2020.eu/ontology/semanticmapping/testModel#B"
                        },
                        "properties": ["java.util.ArrayList", [["eu.h2020.symbiote.semantics.mapping.model.production.ObjectPropertyValueProduction", {
                                        "path": "<http://www.symbiote-h2020.eu/ontology/semanticmapping/testModel#hasValue2>",
                                        "uri": {
                                            "type": "URI",
                                            "id": "http://www.symbiote-h2020.eu/ontology/semanticmapping/testModel#instanceOfB"
                                        }
                                    }]]]
                    }]
            }]]
},
  "replacements" : [
    { "STRING_VALUE" : "\"test\"",
	  "INT_VALUE" : "\"42\"^^xsd:integer"}
  ]
}