// initial extensions to gradle
buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath group: 'com.cinnober.gradle', name: 'semver-git', version: '2.2.2'
        classpath 'org.owasp:dependency-check-gradle:3.0.2'
    }
}

// code
apply plugin: 'java'

// code quality
apply plugin: 'jacoco'
apply plugin: 'org.owasp.dependencycheck'

// IDEs
apply plugin: 'eclipse'
apply plugin: 'idea'

// publishing
apply plugin: 'com.cinnober.gradle.semver-git'
apply plugin: 'maven-publish'


sourceCompatibility = 1.8
targetCompatibility = 1.8

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'eu.h2020.symbiote'
            version = project.version
            from components.java
        }
    }
}

// dependencies section
repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

dependencies {
    // Symbiote Security section
    //    compile('com.github.symbiote-h2020:SymbIoTeLibraries:[5.8,5.999]'){ changing = true }
    compile('org.apache.jena:jena-core:3.4.0'){
        exclude group: 'org.slf4j'
    }
    compile('org.apache.jena:jena-querybuilder:3.4.0'){
        exclude group: 'org.slf4j'
    }
    compile('org.apache.jena:jena-arq:3.4.0')
    {
        exclude group: 'org.slf4j'
    }
    compile('org.apache.jena:jena-cmds:3.4.0') {
        exclude group: 'org.slf4j'
    }
    compile group: 'org.slf4j', name:'slf4j-api', version: '1.7.25'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.25'
    compile group: 'log4j', name: 'log4j', version: '1.2.17'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.9.4'
    // https://mvnrepository.com/artifact/org.reflections/reflections
    compile group: 'org.reflections', name: 'reflections', version: '0.9.11'

    // common testing
    testCompile('junit:junit:[4.12,4.999]')
    testCompile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.25'
}

// code quality below
task generateJavaDocs(type: Javadoc) {
    source = sourceSets.main.allJava
    classpath = configurations.compileClasspath
    destinationDir = reporting.file("javadocs")

    options {
        setMemberLevel JavadocMemberLevel.PUBLIC
        setAuthor true

        links "https://docs.oracle.com/javase/8/docs/api/"
    }
}

// jacoco configuration section
jacoco {
    toolVersion = "0.7.9"
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

// owasp config
dependencyCheck {
    outputDirectory = file("$rootDir/build/reports/security")
}

// including code quality extensions into the build
check.dependsOn(jacocoTestReport)//, 'dependencyCheck')

task generateOntology {
    doLast {
        description = 'Generate Ontology Class for Testing'    
        def params = [
        "-i", "${projectDir}/src/test/resources/testModel.ttl",     // input file
        "-o", "src/test/java",                                      // output dir
        "-n", "TEST_MODEL",                                         // class name
        "--package", "eu.h2020.symbiote.semantics.mapping.test.ontology",    // package name
        "--nocomments", "--ontology", "--nostrict"]                 // tags
        javaexec {
            classpath sourceSets.main.runtimeClasspath
            main = 'jena.schemagen'
            args = params
        }      
    }
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "gradle.plugin.com.intershop.gradle.javacc:javacc-gradle-plugin:2.0.0"
    }
}
apply plugin: 'com.intershop.gradle.javacc'

javacc {
    configs {
        MappingParser {
            inputFile = file('src/main/jjtree/MappingParser.jjt')
            outputDir = file(project.buildDir.absolutePath + '/generated-sources/javacc')
            packageName = 'eu.h2020.symbiote.semantics.mapping.parser'            
            staticParam = 'false'
//            lookahead = '3'
            jjtree {
                multi = 'true'                
//                visitor = 'false'
//                visitorDataType = 'eu.h2020.symbiote.semantics.mapping.model.Mapping'
//                visitorReturnType = 'eu.h2020.symbiote.semantics.mapping.model.Mapping'
//                staticParam = 'false'               
            }
        }
        
    }
}
